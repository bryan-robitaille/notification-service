
type Query{
    notifications(appID: String, actionLevel: String, skip: Int, first: Int): [Notification!]!
}

type Mutation{
    createNotification(appID: String!, actionLink: String, actionLevel: actionLevel!, email: EmailInput, online: OnlineInput, whoDunIt: whoDunItInput): Notification!
    updateNotification(id: ID!, online: UpdateOnlineInput): Notification!
}

enum actionLevel{
  NoUserAction
  Featured
  UserActionRequired
}

enum Status{
  Sent
  Queued
}

type Notification{
  id: ID!
  generatedOn: String
  modifiedOn: String
  gcID: String!
  appID: String!
  actionLink: String
  actionLevel: actionLevel!
  email: Email
  online: Online
  whoDunIt: whoDunIt
}

type whoDunIt{
  gcID: String!
  teamID: String
  organizationID: String
  notifications: [Notification!]
}

type Email{
    from: String!
    to: String!
    subject: String!
    body: String!
    status: Status!
    sendError: String
    html: Boolean!
}

type Online{
    titleEn: String!
    titleFr: String!
    descriptionEn: String!
    descriptionFr: String!
    viewed: Boolean!
}
input EmailInput{
    from: String!
    to: String!
    subject: String!
    body: String!
    html: Boolean
}

input OnlineInput{
    titleEn: String!
    titleFr: String!
    descriptionEn: String!
    descriptionFr: String!
}

input UpdateOnlineInput{
    viewed: Boolean
}

input whoDunItInput{
  gcID: String
  teamID: String
  organizationID: String
}
