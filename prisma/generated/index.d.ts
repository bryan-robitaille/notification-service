// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  email: (where?: EmailWhereInput) => Promise<boolean>;
  notification: (where?: NotificationWhereInput) => Promise<boolean>;
  online: (where?: OnlineWhereInput) => Promise<boolean>;
  whoDunIt: (where?: whoDunItWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  email: (where: EmailWhereUniqueInput) => EmailNullablePromise;
  emails: (args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Email>;
  emailsConnection: (args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EmailConnectionPromise;
  notification: (
    where: NotificationWhereUniqueInput
  ) => NotificationNullablePromise;
  notifications: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Notification>;
  notificationsConnection: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NotificationConnectionPromise;
  online: (where: OnlineWhereUniqueInput) => OnlineNullablePromise;
  onlines: (args?: {
    where?: OnlineWhereInput;
    orderBy?: OnlineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Online>;
  onlinesConnection: (args?: {
    where?: OnlineWhereInput;
    orderBy?: OnlineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OnlineConnectionPromise;
  whoDunIt: (where: whoDunItWhereUniqueInput) => whoDunItNullablePromise;
  whoDunIts: (args?: {
    where?: whoDunItWhereInput;
    orderBy?: whoDunItOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<whoDunIt>;
  whoDunItsConnection: (args?: {
    where?: whoDunItWhereInput;
    orderBy?: whoDunItOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => whoDunItConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEmail: (data: EmailCreateInput) => EmailPromise;
  updateEmail: (args: {
    data: EmailUpdateInput;
    where: EmailWhereUniqueInput;
  }) => EmailPromise;
  updateManyEmails: (args: {
    data: EmailUpdateManyMutationInput;
    where?: EmailWhereInput;
  }) => BatchPayloadPromise;
  upsertEmail: (args: {
    where: EmailWhereUniqueInput;
    create: EmailCreateInput;
    update: EmailUpdateInput;
  }) => EmailPromise;
  deleteEmail: (where: EmailWhereUniqueInput) => EmailPromise;
  deleteManyEmails: (where?: EmailWhereInput) => BatchPayloadPromise;
  createNotification: (data: NotificationCreateInput) => NotificationPromise;
  updateNotification: (args: {
    data: NotificationUpdateInput;
    where: NotificationWhereUniqueInput;
  }) => NotificationPromise;
  updateManyNotifications: (args: {
    data: NotificationUpdateManyMutationInput;
    where?: NotificationWhereInput;
  }) => BatchPayloadPromise;
  upsertNotification: (args: {
    where: NotificationWhereUniqueInput;
    create: NotificationCreateInput;
    update: NotificationUpdateInput;
  }) => NotificationPromise;
  deleteNotification: (
    where: NotificationWhereUniqueInput
  ) => NotificationPromise;
  deleteManyNotifications: (
    where?: NotificationWhereInput
  ) => BatchPayloadPromise;
  createOnline: (data: OnlineCreateInput) => OnlinePromise;
  updateOnline: (args: {
    data: OnlineUpdateInput;
    where: OnlineWhereUniqueInput;
  }) => OnlinePromise;
  updateManyOnlines: (args: {
    data: OnlineUpdateManyMutationInput;
    where?: OnlineWhereInput;
  }) => BatchPayloadPromise;
  upsertOnline: (args: {
    where: OnlineWhereUniqueInput;
    create: OnlineCreateInput;
    update: OnlineUpdateInput;
  }) => OnlinePromise;
  deleteOnline: (where: OnlineWhereUniqueInput) => OnlinePromise;
  deleteManyOnlines: (where?: OnlineWhereInput) => BatchPayloadPromise;
  createwhoDunIt: (data: whoDunItCreateInput) => whoDunItPromise;
  updatewhoDunIt: (args: {
    data: whoDunItUpdateInput;
    where: whoDunItWhereUniqueInput;
  }) => whoDunItPromise;
  updateManywhoDunIts: (args: {
    data: whoDunItUpdateManyMutationInput;
    where?: whoDunItWhereInput;
  }) => BatchPayloadPromise;
  upsertwhoDunIt: (args: {
    where: whoDunItWhereUniqueInput;
    create: whoDunItCreateInput;
    update: whoDunItUpdateInput;
  }) => whoDunItPromise;
  deletewhoDunIt: (where: whoDunItWhereUniqueInput) => whoDunItPromise;
  deleteManywhoDunIts: (where?: whoDunItWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  email: (
    where?: EmailSubscriptionWhereInput
  ) => EmailSubscriptionPayloadSubscription;
  notification: (
    where?: NotificationSubscriptionWhereInput
  ) => NotificationSubscriptionPayloadSubscription;
  online: (
    where?: OnlineSubscriptionWhereInput
  ) => OnlineSubscriptionPayloadSubscription;
  whoDunIt: (
    where?: whoDunItSubscriptionWhereInput
  ) => whoDunItSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type actionLevel = "NoUserAction" | "Featured" | "UserActionRequired";

export type EmailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "from_ASC"
  | "from_DESC"
  | "to_ASC"
  | "to_DESC"
  | "subject_ASC"
  | "subject_DESC"
  | "body_ASC"
  | "body_DESC"
  | "status_ASC"
  | "status_DESC"
  | "sendError_ASC"
  | "sendError_DESC"
  | "html_ASC"
  | "html_DESC";

export type NotificationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "generatedOn_ASC"
  | "generatedOn_DESC"
  | "modifiedOn_ASC"
  | "modifiedOn_DESC"
  | "gcID_ASC"
  | "gcID_DESC"
  | "appID_ASC"
  | "appID_DESC"
  | "actionLink_ASC"
  | "actionLink_DESC"
  | "actionLevel_ASC"
  | "actionLevel_DESC";

export type OnlineOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "titleEn_ASC"
  | "titleEn_DESC"
  | "titleFr_ASC"
  | "titleFr_DESC"
  | "descriptionEn_ASC"
  | "descriptionEn_DESC"
  | "descriptionFr_ASC"
  | "descriptionFr_DESC"
  | "viewed_ASC"
  | "viewed_DESC";

export type Status = "Sent" | "Queued";

export type whoDunItOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "gcID_ASC"
  | "gcID_DESC"
  | "teamID_ASC"
  | "teamID_DESC"
  | "organizationID_ASC"
  | "organizationID_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface EmailCreateOneInput {
  create?: Maybe<EmailCreateInput>;
  connect?: Maybe<EmailWhereUniqueInput>;
}

export type EmailWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NotificationCreateManyWithoutWhoDunItInput {
  create?: Maybe<
    | NotificationCreateWithoutWhoDunItInput[]
    | NotificationCreateWithoutWhoDunItInput
  >;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
}

export interface whoDunItUpdateOneWithoutNotificationsInput {
  create?: Maybe<whoDunItCreateWithoutNotificationsInput>;
  update?: Maybe<whoDunItUpdateWithoutNotificationsDataInput>;
  upsert?: Maybe<whoDunItUpsertWithoutNotificationsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<whoDunItWhereUniqueInput>;
}

export interface whoDunItCreateInput {
  id?: Maybe<ID_Input>;
  gcID?: Maybe<String>;
  teamID?: Maybe<String>;
  organizationID?: Maybe<String>;
  notifications?: Maybe<NotificationCreateManyWithoutWhoDunItInput>;
}

export interface NotificationUpdateInput {
  generatedOn?: Maybe<String>;
  modifiedOn?: Maybe<String>;
  gcID?: Maybe<String>;
  appID?: Maybe<String>;
  actionLink?: Maybe<String>;
  actionLevel?: Maybe<actionLevel>;
  email?: Maybe<EmailUpdateOneInput>;
  online?: Maybe<OnlineUpdateOneInput>;
  whoDunIt?: Maybe<whoDunItUpdateOneWithoutNotificationsInput>;
}

export interface OnlineUpdateManyMutationInput {
  titleEn?: Maybe<String>;
  titleFr?: Maybe<String>;
  descriptionEn?: Maybe<String>;
  descriptionFr?: Maybe<String>;
  viewed?: Maybe<Boolean>;
}

export interface OnlineSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OnlineWhereInput>;
  AND?: Maybe<OnlineSubscriptionWhereInput[] | OnlineSubscriptionWhereInput>;
  OR?: Maybe<OnlineSubscriptionWhereInput[] | OnlineSubscriptionWhereInput>;
  NOT?: Maybe<OnlineSubscriptionWhereInput[] | OnlineSubscriptionWhereInput>;
}

export interface NotificationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NotificationWhereInput>;
  AND?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  OR?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
}

export interface whoDunItUpdateManyMutationInput {
  gcID?: Maybe<String>;
  teamID?: Maybe<String>;
  organizationID?: Maybe<String>;
}

export interface EmailCreateInput {
  id?: Maybe<ID_Input>;
  from: String;
  to: String;
  subject: String;
  body: String;
  status: Status;
  sendError?: Maybe<String>;
  html?: Maybe<Boolean>;
}

export interface NotificationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  generatedOn?: Maybe<String>;
  generatedOn_not?: Maybe<String>;
  generatedOn_in?: Maybe<String[] | String>;
  generatedOn_not_in?: Maybe<String[] | String>;
  generatedOn_lt?: Maybe<String>;
  generatedOn_lte?: Maybe<String>;
  generatedOn_gt?: Maybe<String>;
  generatedOn_gte?: Maybe<String>;
  generatedOn_contains?: Maybe<String>;
  generatedOn_not_contains?: Maybe<String>;
  generatedOn_starts_with?: Maybe<String>;
  generatedOn_not_starts_with?: Maybe<String>;
  generatedOn_ends_with?: Maybe<String>;
  generatedOn_not_ends_with?: Maybe<String>;
  modifiedOn?: Maybe<String>;
  modifiedOn_not?: Maybe<String>;
  modifiedOn_in?: Maybe<String[] | String>;
  modifiedOn_not_in?: Maybe<String[] | String>;
  modifiedOn_lt?: Maybe<String>;
  modifiedOn_lte?: Maybe<String>;
  modifiedOn_gt?: Maybe<String>;
  modifiedOn_gte?: Maybe<String>;
  modifiedOn_contains?: Maybe<String>;
  modifiedOn_not_contains?: Maybe<String>;
  modifiedOn_starts_with?: Maybe<String>;
  modifiedOn_not_starts_with?: Maybe<String>;
  modifiedOn_ends_with?: Maybe<String>;
  modifiedOn_not_ends_with?: Maybe<String>;
  gcID?: Maybe<String>;
  gcID_not?: Maybe<String>;
  gcID_in?: Maybe<String[] | String>;
  gcID_not_in?: Maybe<String[] | String>;
  gcID_lt?: Maybe<String>;
  gcID_lte?: Maybe<String>;
  gcID_gt?: Maybe<String>;
  gcID_gte?: Maybe<String>;
  gcID_contains?: Maybe<String>;
  gcID_not_contains?: Maybe<String>;
  gcID_starts_with?: Maybe<String>;
  gcID_not_starts_with?: Maybe<String>;
  gcID_ends_with?: Maybe<String>;
  gcID_not_ends_with?: Maybe<String>;
  appID?: Maybe<String>;
  appID_not?: Maybe<String>;
  appID_in?: Maybe<String[] | String>;
  appID_not_in?: Maybe<String[] | String>;
  appID_lt?: Maybe<String>;
  appID_lte?: Maybe<String>;
  appID_gt?: Maybe<String>;
  appID_gte?: Maybe<String>;
  appID_contains?: Maybe<String>;
  appID_not_contains?: Maybe<String>;
  appID_starts_with?: Maybe<String>;
  appID_not_starts_with?: Maybe<String>;
  appID_ends_with?: Maybe<String>;
  appID_not_ends_with?: Maybe<String>;
  actionLink?: Maybe<String>;
  actionLink_not?: Maybe<String>;
  actionLink_in?: Maybe<String[] | String>;
  actionLink_not_in?: Maybe<String[] | String>;
  actionLink_lt?: Maybe<String>;
  actionLink_lte?: Maybe<String>;
  actionLink_gt?: Maybe<String>;
  actionLink_gte?: Maybe<String>;
  actionLink_contains?: Maybe<String>;
  actionLink_not_contains?: Maybe<String>;
  actionLink_starts_with?: Maybe<String>;
  actionLink_not_starts_with?: Maybe<String>;
  actionLink_ends_with?: Maybe<String>;
  actionLink_not_ends_with?: Maybe<String>;
  actionLevel?: Maybe<actionLevel>;
  actionLevel_not?: Maybe<actionLevel>;
  actionLevel_in?: Maybe<actionLevel[] | actionLevel>;
  actionLevel_not_in?: Maybe<actionLevel[] | actionLevel>;
  email?: Maybe<EmailWhereInput>;
  online?: Maybe<OnlineWhereInput>;
  whoDunIt?: Maybe<whoDunItWhereInput>;
  AND?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  OR?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  NOT?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
}

export interface EmailUpdateInput {
  from?: Maybe<String>;
  to?: Maybe<String>;
  subject?: Maybe<String>;
  body?: Maybe<String>;
  status?: Maybe<Status>;
  sendError?: Maybe<String>;
  html?: Maybe<Boolean>;
}

export interface whoDunItWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  gcID?: Maybe<String>;
  gcID_not?: Maybe<String>;
  gcID_in?: Maybe<String[] | String>;
  gcID_not_in?: Maybe<String[] | String>;
  gcID_lt?: Maybe<String>;
  gcID_lte?: Maybe<String>;
  gcID_gt?: Maybe<String>;
  gcID_gte?: Maybe<String>;
  gcID_contains?: Maybe<String>;
  gcID_not_contains?: Maybe<String>;
  gcID_starts_with?: Maybe<String>;
  gcID_not_starts_with?: Maybe<String>;
  gcID_ends_with?: Maybe<String>;
  gcID_not_ends_with?: Maybe<String>;
  teamID?: Maybe<String>;
  teamID_not?: Maybe<String>;
  teamID_in?: Maybe<String[] | String>;
  teamID_not_in?: Maybe<String[] | String>;
  teamID_lt?: Maybe<String>;
  teamID_lte?: Maybe<String>;
  teamID_gt?: Maybe<String>;
  teamID_gte?: Maybe<String>;
  teamID_contains?: Maybe<String>;
  teamID_not_contains?: Maybe<String>;
  teamID_starts_with?: Maybe<String>;
  teamID_not_starts_with?: Maybe<String>;
  teamID_ends_with?: Maybe<String>;
  teamID_not_ends_with?: Maybe<String>;
  organizationID?: Maybe<String>;
  organizationID_not?: Maybe<String>;
  organizationID_in?: Maybe<String[] | String>;
  organizationID_not_in?: Maybe<String[] | String>;
  organizationID_lt?: Maybe<String>;
  organizationID_lte?: Maybe<String>;
  organizationID_gt?: Maybe<String>;
  organizationID_gte?: Maybe<String>;
  organizationID_contains?: Maybe<String>;
  organizationID_not_contains?: Maybe<String>;
  organizationID_starts_with?: Maybe<String>;
  organizationID_not_starts_with?: Maybe<String>;
  organizationID_ends_with?: Maybe<String>;
  organizationID_not_ends_with?: Maybe<String>;
  notifications_every?: Maybe<NotificationWhereInput>;
  notifications_some?: Maybe<NotificationWhereInput>;
  notifications_none?: Maybe<NotificationWhereInput>;
  AND?: Maybe<whoDunItWhereInput[] | whoDunItWhereInput>;
  OR?: Maybe<whoDunItWhereInput[] | whoDunItWhereInput>;
  NOT?: Maybe<whoDunItWhereInput[] | whoDunItWhereInput>;
}

export interface EmailUpdateManyMutationInput {
  from?: Maybe<String>;
  to?: Maybe<String>;
  subject?: Maybe<String>;
  body?: Maybe<String>;
  status?: Maybe<Status>;
  sendError?: Maybe<String>;
  html?: Maybe<Boolean>;
}

export interface NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput;
  data: NotificationUpdateManyDataInput;
}

export interface OnlineUpdateInput {
  titleEn?: Maybe<String>;
  titleFr?: Maybe<String>;
  descriptionEn?: Maybe<String>;
  descriptionFr?: Maybe<String>;
  viewed?: Maybe<Boolean>;
}

export interface NotificationUpsertWithWhereUniqueWithoutWhoDunItInput {
  where: NotificationWhereUniqueInput;
  update: NotificationUpdateWithoutWhoDunItDataInput;
  create: NotificationCreateWithoutWhoDunItInput;
}

export interface NotificationUpdateManyMutationInput {
  generatedOn?: Maybe<String>;
  modifiedOn?: Maybe<String>;
  gcID?: Maybe<String>;
  appID?: Maybe<String>;
  actionLink?: Maybe<String>;
  actionLevel?: Maybe<actionLevel>;
}

export interface NotificationUpdateWithoutWhoDunItDataInput {
  generatedOn?: Maybe<String>;
  modifiedOn?: Maybe<String>;
  gcID?: Maybe<String>;
  appID?: Maybe<String>;
  actionLink?: Maybe<String>;
  actionLevel?: Maybe<actionLevel>;
  email?: Maybe<EmailUpdateOneInput>;
  online?: Maybe<OnlineUpdateOneInput>;
}

export interface NotificationCreateInput {
  id?: Maybe<ID_Input>;
  generatedOn: String;
  modifiedOn?: Maybe<String>;
  gcID: String;
  appID: String;
  actionLink?: Maybe<String>;
  actionLevel: actionLevel;
  email?: Maybe<EmailCreateOneInput>;
  online?: Maybe<OnlineCreateOneInput>;
  whoDunIt?: Maybe<whoDunItCreateOneWithoutNotificationsInput>;
}

export interface NotificationUpdateManyWithoutWhoDunItInput {
  create?: Maybe<
    | NotificationCreateWithoutWhoDunItInput[]
    | NotificationCreateWithoutWhoDunItInput
  >;
  delete?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  set?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  disconnect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  update?: Maybe<
    | NotificationUpdateWithWhereUniqueWithoutWhoDunItInput[]
    | NotificationUpdateWithWhereUniqueWithoutWhoDunItInput
  >;
  upsert?: Maybe<
    | NotificationUpsertWithWhereUniqueWithoutWhoDunItInput[]
    | NotificationUpsertWithWhereUniqueWithoutWhoDunItInput
  >;
  deleteMany?: Maybe<
    NotificationScalarWhereInput[] | NotificationScalarWhereInput
  >;
  updateMany?: Maybe<
    | NotificationUpdateManyWithWhereNestedInput[]
    | NotificationUpdateManyWithWhereNestedInput
  >;
}

export interface whoDunItUpsertWithoutNotificationsInput {
  update: whoDunItUpdateWithoutNotificationsDataInput;
  create: whoDunItCreateWithoutNotificationsInput;
}

export type whoDunItWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OnlineCreateOneInput {
  create?: Maybe<OnlineCreateInput>;
  connect?: Maybe<OnlineWhereUniqueInput>;
}

export interface whoDunItSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<whoDunItWhereInput>;
  AND?: Maybe<
    whoDunItSubscriptionWhereInput[] | whoDunItSubscriptionWhereInput
  >;
  OR?: Maybe<whoDunItSubscriptionWhereInput[] | whoDunItSubscriptionWhereInput>;
  NOT?: Maybe<
    whoDunItSubscriptionWhereInput[] | whoDunItSubscriptionWhereInput
  >;
}

export interface OnlineCreateInput {
  id?: Maybe<ID_Input>;
  titleEn: String;
  titleFr: String;
  descriptionEn: String;
  descriptionFr: String;
  viewed?: Maybe<Boolean>;
}

export interface EmailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EmailWhereInput>;
  AND?: Maybe<EmailSubscriptionWhereInput[] | EmailSubscriptionWhereInput>;
  OR?: Maybe<EmailSubscriptionWhereInput[] | EmailSubscriptionWhereInput>;
  NOT?: Maybe<EmailSubscriptionWhereInput[] | EmailSubscriptionWhereInput>;
}

export interface whoDunItCreateOneWithoutNotificationsInput {
  create?: Maybe<whoDunItCreateWithoutNotificationsInput>;
  connect?: Maybe<whoDunItWhereUniqueInput>;
}

export interface OnlineWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  titleEn?: Maybe<String>;
  titleEn_not?: Maybe<String>;
  titleEn_in?: Maybe<String[] | String>;
  titleEn_not_in?: Maybe<String[] | String>;
  titleEn_lt?: Maybe<String>;
  titleEn_lte?: Maybe<String>;
  titleEn_gt?: Maybe<String>;
  titleEn_gte?: Maybe<String>;
  titleEn_contains?: Maybe<String>;
  titleEn_not_contains?: Maybe<String>;
  titleEn_starts_with?: Maybe<String>;
  titleEn_not_starts_with?: Maybe<String>;
  titleEn_ends_with?: Maybe<String>;
  titleEn_not_ends_with?: Maybe<String>;
  titleFr?: Maybe<String>;
  titleFr_not?: Maybe<String>;
  titleFr_in?: Maybe<String[] | String>;
  titleFr_not_in?: Maybe<String[] | String>;
  titleFr_lt?: Maybe<String>;
  titleFr_lte?: Maybe<String>;
  titleFr_gt?: Maybe<String>;
  titleFr_gte?: Maybe<String>;
  titleFr_contains?: Maybe<String>;
  titleFr_not_contains?: Maybe<String>;
  titleFr_starts_with?: Maybe<String>;
  titleFr_not_starts_with?: Maybe<String>;
  titleFr_ends_with?: Maybe<String>;
  titleFr_not_ends_with?: Maybe<String>;
  descriptionEn?: Maybe<String>;
  descriptionEn_not?: Maybe<String>;
  descriptionEn_in?: Maybe<String[] | String>;
  descriptionEn_not_in?: Maybe<String[] | String>;
  descriptionEn_lt?: Maybe<String>;
  descriptionEn_lte?: Maybe<String>;
  descriptionEn_gt?: Maybe<String>;
  descriptionEn_gte?: Maybe<String>;
  descriptionEn_contains?: Maybe<String>;
  descriptionEn_not_contains?: Maybe<String>;
  descriptionEn_starts_with?: Maybe<String>;
  descriptionEn_not_starts_with?: Maybe<String>;
  descriptionEn_ends_with?: Maybe<String>;
  descriptionEn_not_ends_with?: Maybe<String>;
  descriptionFr?: Maybe<String>;
  descriptionFr_not?: Maybe<String>;
  descriptionFr_in?: Maybe<String[] | String>;
  descriptionFr_not_in?: Maybe<String[] | String>;
  descriptionFr_lt?: Maybe<String>;
  descriptionFr_lte?: Maybe<String>;
  descriptionFr_gt?: Maybe<String>;
  descriptionFr_gte?: Maybe<String>;
  descriptionFr_contains?: Maybe<String>;
  descriptionFr_not_contains?: Maybe<String>;
  descriptionFr_starts_with?: Maybe<String>;
  descriptionFr_not_starts_with?: Maybe<String>;
  descriptionFr_ends_with?: Maybe<String>;
  descriptionFr_not_ends_with?: Maybe<String>;
  viewed?: Maybe<Boolean>;
  viewed_not?: Maybe<Boolean>;
  AND?: Maybe<OnlineWhereInput[] | OnlineWhereInput>;
  OR?: Maybe<OnlineWhereInput[] | OnlineWhereInput>;
  NOT?: Maybe<OnlineWhereInput[] | OnlineWhereInput>;
}

export interface whoDunItCreateWithoutNotificationsInput {
  id?: Maybe<ID_Input>;
  gcID?: Maybe<String>;
  teamID?: Maybe<String>;
  organizationID?: Maybe<String>;
}

export interface NotificationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  generatedOn?: Maybe<String>;
  generatedOn_not?: Maybe<String>;
  generatedOn_in?: Maybe<String[] | String>;
  generatedOn_not_in?: Maybe<String[] | String>;
  generatedOn_lt?: Maybe<String>;
  generatedOn_lte?: Maybe<String>;
  generatedOn_gt?: Maybe<String>;
  generatedOn_gte?: Maybe<String>;
  generatedOn_contains?: Maybe<String>;
  generatedOn_not_contains?: Maybe<String>;
  generatedOn_starts_with?: Maybe<String>;
  generatedOn_not_starts_with?: Maybe<String>;
  generatedOn_ends_with?: Maybe<String>;
  generatedOn_not_ends_with?: Maybe<String>;
  modifiedOn?: Maybe<String>;
  modifiedOn_not?: Maybe<String>;
  modifiedOn_in?: Maybe<String[] | String>;
  modifiedOn_not_in?: Maybe<String[] | String>;
  modifiedOn_lt?: Maybe<String>;
  modifiedOn_lte?: Maybe<String>;
  modifiedOn_gt?: Maybe<String>;
  modifiedOn_gte?: Maybe<String>;
  modifiedOn_contains?: Maybe<String>;
  modifiedOn_not_contains?: Maybe<String>;
  modifiedOn_starts_with?: Maybe<String>;
  modifiedOn_not_starts_with?: Maybe<String>;
  modifiedOn_ends_with?: Maybe<String>;
  modifiedOn_not_ends_with?: Maybe<String>;
  gcID?: Maybe<String>;
  gcID_not?: Maybe<String>;
  gcID_in?: Maybe<String[] | String>;
  gcID_not_in?: Maybe<String[] | String>;
  gcID_lt?: Maybe<String>;
  gcID_lte?: Maybe<String>;
  gcID_gt?: Maybe<String>;
  gcID_gte?: Maybe<String>;
  gcID_contains?: Maybe<String>;
  gcID_not_contains?: Maybe<String>;
  gcID_starts_with?: Maybe<String>;
  gcID_not_starts_with?: Maybe<String>;
  gcID_ends_with?: Maybe<String>;
  gcID_not_ends_with?: Maybe<String>;
  appID?: Maybe<String>;
  appID_not?: Maybe<String>;
  appID_in?: Maybe<String[] | String>;
  appID_not_in?: Maybe<String[] | String>;
  appID_lt?: Maybe<String>;
  appID_lte?: Maybe<String>;
  appID_gt?: Maybe<String>;
  appID_gte?: Maybe<String>;
  appID_contains?: Maybe<String>;
  appID_not_contains?: Maybe<String>;
  appID_starts_with?: Maybe<String>;
  appID_not_starts_with?: Maybe<String>;
  appID_ends_with?: Maybe<String>;
  appID_not_ends_with?: Maybe<String>;
  actionLink?: Maybe<String>;
  actionLink_not?: Maybe<String>;
  actionLink_in?: Maybe<String[] | String>;
  actionLink_not_in?: Maybe<String[] | String>;
  actionLink_lt?: Maybe<String>;
  actionLink_lte?: Maybe<String>;
  actionLink_gt?: Maybe<String>;
  actionLink_gte?: Maybe<String>;
  actionLink_contains?: Maybe<String>;
  actionLink_not_contains?: Maybe<String>;
  actionLink_starts_with?: Maybe<String>;
  actionLink_not_starts_with?: Maybe<String>;
  actionLink_ends_with?: Maybe<String>;
  actionLink_not_ends_with?: Maybe<String>;
  actionLevel?: Maybe<actionLevel>;
  actionLevel_not?: Maybe<actionLevel>;
  actionLevel_in?: Maybe<actionLevel[] | actionLevel>;
  actionLevel_not_in?: Maybe<actionLevel[] | actionLevel>;
  AND?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  OR?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  NOT?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
}

export interface whoDunItUpdateWithoutNotificationsDataInput {
  gcID?: Maybe<String>;
  teamID?: Maybe<String>;
  organizationID?: Maybe<String>;
}

export interface NotificationUpdateWithWhereUniqueWithoutWhoDunItInput {
  where: NotificationWhereUniqueInput;
  data: NotificationUpdateWithoutWhoDunItDataInput;
}

export interface EmailUpdateOneInput {
  create?: Maybe<EmailCreateInput>;
  update?: Maybe<EmailUpdateDataInput>;
  upsert?: Maybe<EmailUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<EmailWhereUniqueInput>;
}

export interface NotificationCreateWithoutWhoDunItInput {
  id?: Maybe<ID_Input>;
  generatedOn: String;
  modifiedOn?: Maybe<String>;
  gcID: String;
  appID: String;
  actionLink?: Maybe<String>;
  actionLevel: actionLevel;
  email?: Maybe<EmailCreateOneInput>;
  online?: Maybe<OnlineCreateOneInput>;
}

export interface EmailUpdateDataInput {
  from?: Maybe<String>;
  to?: Maybe<String>;
  subject?: Maybe<String>;
  body?: Maybe<String>;
  status?: Maybe<Status>;
  sendError?: Maybe<String>;
  html?: Maybe<Boolean>;
}

export interface NotificationUpdateManyDataInput {
  generatedOn?: Maybe<String>;
  modifiedOn?: Maybe<String>;
  gcID?: Maybe<String>;
  appID?: Maybe<String>;
  actionLink?: Maybe<String>;
  actionLevel?: Maybe<actionLevel>;
}

export interface OnlineUpsertNestedInput {
  update: OnlineUpdateDataInput;
  create: OnlineCreateInput;
}

export interface OnlineUpdateDataInput {
  titleEn?: Maybe<String>;
  titleFr?: Maybe<String>;
  descriptionEn?: Maybe<String>;
  descriptionFr?: Maybe<String>;
  viewed?: Maybe<Boolean>;
}

export interface OnlineUpdateOneInput {
  create?: Maybe<OnlineCreateInput>;
  update?: Maybe<OnlineUpdateDataInput>;
  upsert?: Maybe<OnlineUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<OnlineWhereUniqueInput>;
}

export interface EmailUpsertNestedInput {
  update: EmailUpdateDataInput;
  create: EmailCreateInput;
}

export interface EmailWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  to?: Maybe<String>;
  to_not?: Maybe<String>;
  to_in?: Maybe<String[] | String>;
  to_not_in?: Maybe<String[] | String>;
  to_lt?: Maybe<String>;
  to_lte?: Maybe<String>;
  to_gt?: Maybe<String>;
  to_gte?: Maybe<String>;
  to_contains?: Maybe<String>;
  to_not_contains?: Maybe<String>;
  to_starts_with?: Maybe<String>;
  to_not_starts_with?: Maybe<String>;
  to_ends_with?: Maybe<String>;
  to_not_ends_with?: Maybe<String>;
  subject?: Maybe<String>;
  subject_not?: Maybe<String>;
  subject_in?: Maybe<String[] | String>;
  subject_not_in?: Maybe<String[] | String>;
  subject_lt?: Maybe<String>;
  subject_lte?: Maybe<String>;
  subject_gt?: Maybe<String>;
  subject_gte?: Maybe<String>;
  subject_contains?: Maybe<String>;
  subject_not_contains?: Maybe<String>;
  subject_starts_with?: Maybe<String>;
  subject_not_starts_with?: Maybe<String>;
  subject_ends_with?: Maybe<String>;
  subject_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  status?: Maybe<Status>;
  status_not?: Maybe<Status>;
  status_in?: Maybe<Status[] | Status>;
  status_not_in?: Maybe<Status[] | Status>;
  sendError?: Maybe<String>;
  sendError_not?: Maybe<String>;
  sendError_in?: Maybe<String[] | String>;
  sendError_not_in?: Maybe<String[] | String>;
  sendError_lt?: Maybe<String>;
  sendError_lte?: Maybe<String>;
  sendError_gt?: Maybe<String>;
  sendError_gte?: Maybe<String>;
  sendError_contains?: Maybe<String>;
  sendError_not_contains?: Maybe<String>;
  sendError_starts_with?: Maybe<String>;
  sendError_not_starts_with?: Maybe<String>;
  sendError_ends_with?: Maybe<String>;
  sendError_not_ends_with?: Maybe<String>;
  html?: Maybe<Boolean>;
  html_not?: Maybe<Boolean>;
  AND?: Maybe<EmailWhereInput[] | EmailWhereInput>;
  OR?: Maybe<EmailWhereInput[] | EmailWhereInput>;
  NOT?: Maybe<EmailWhereInput[] | EmailWhereInput>;
}

export type NotificationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface whoDunItUpdateInput {
  gcID?: Maybe<String>;
  teamID?: Maybe<String>;
  organizationID?: Maybe<String>;
  notifications?: Maybe<NotificationUpdateManyWithoutWhoDunItInput>;
}

export type OnlineWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface whoDunItPreviousValues {
  id: ID_Output;
  gcID?: String;
  teamID?: String;
  organizationID?: String;
}

export interface whoDunItPreviousValuesPromise
  extends Promise<whoDunItPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gcID: () => Promise<String>;
  teamID: () => Promise<String>;
  organizationID: () => Promise<String>;
}

export interface whoDunItPreviousValuesSubscription
  extends Promise<AsyncIterator<whoDunItPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gcID: () => Promise<AsyncIterator<String>>;
  teamID: () => Promise<AsyncIterator<String>>;
  organizationID: () => Promise<AsyncIterator<String>>;
}

export interface whoDunIt {
  id: ID_Output;
  gcID?: String;
  teamID?: String;
  organizationID?: String;
}

export interface whoDunItPromise extends Promise<whoDunIt>, Fragmentable {
  id: () => Promise<ID_Output>;
  gcID: () => Promise<String>;
  teamID: () => Promise<String>;
  organizationID: () => Promise<String>;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface whoDunItSubscription
  extends Promise<AsyncIterator<whoDunIt>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gcID: () => Promise<AsyncIterator<String>>;
  teamID: () => Promise<AsyncIterator<String>>;
  organizationID: () => Promise<AsyncIterator<String>>;
  notifications: <T = Promise<AsyncIterator<NotificationSubscription>>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface whoDunItNullablePromise
  extends Promise<whoDunIt | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gcID: () => Promise<String>;
  teamID: () => Promise<String>;
  organizationID: () => Promise<String>;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EmailConnection {
  pageInfo: PageInfo;
  edges: EmailEdge[];
}

export interface EmailConnectionPromise
  extends Promise<EmailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EmailEdge>>() => T;
  aggregate: <T = AggregateEmailPromise>() => T;
}

export interface EmailConnectionSubscription
  extends Promise<AsyncIterator<EmailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EmailEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEmailSubscription>() => T;
}

export interface Online {
  id: ID_Output;
  titleEn: String;
  titleFr: String;
  descriptionEn: String;
  descriptionFr: String;
  viewed: Boolean;
}

export interface OnlinePromise extends Promise<Online>, Fragmentable {
  id: () => Promise<ID_Output>;
  titleEn: () => Promise<String>;
  titleFr: () => Promise<String>;
  descriptionEn: () => Promise<String>;
  descriptionFr: () => Promise<String>;
  viewed: () => Promise<Boolean>;
}

export interface OnlineSubscription
  extends Promise<AsyncIterator<Online>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  titleEn: () => Promise<AsyncIterator<String>>;
  titleFr: () => Promise<AsyncIterator<String>>;
  descriptionEn: () => Promise<AsyncIterator<String>>;
  descriptionFr: () => Promise<AsyncIterator<String>>;
  viewed: () => Promise<AsyncIterator<Boolean>>;
}

export interface OnlineNullablePromise
  extends Promise<Online | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  titleEn: () => Promise<String>;
  titleFr: () => Promise<String>;
  descriptionEn: () => Promise<String>;
  descriptionFr: () => Promise<String>;
  viewed: () => Promise<Boolean>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface OnlinePreviousValues {
  id: ID_Output;
  titleEn: String;
  titleFr: String;
  descriptionEn: String;
  descriptionFr: String;
  viewed: Boolean;
}

export interface OnlinePreviousValuesPromise
  extends Promise<OnlinePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  titleEn: () => Promise<String>;
  titleFr: () => Promise<String>;
  descriptionEn: () => Promise<String>;
  descriptionFr: () => Promise<String>;
  viewed: () => Promise<Boolean>;
}

export interface OnlinePreviousValuesSubscription
  extends Promise<AsyncIterator<OnlinePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  titleEn: () => Promise<AsyncIterator<String>>;
  titleFr: () => Promise<AsyncIterator<String>>;
  descriptionEn: () => Promise<AsyncIterator<String>>;
  descriptionFr: () => Promise<AsyncIterator<String>>;
  viewed: () => Promise<AsyncIterator<Boolean>>;
}

export interface OnlineSubscriptionPayload {
  mutation: MutationType;
  node: Online;
  updatedFields: String[];
  previousValues: OnlinePreviousValues;
}

export interface OnlineSubscriptionPayloadPromise
  extends Promise<OnlineSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OnlinePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OnlinePreviousValuesPromise>() => T;
}

export interface OnlineSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OnlineSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OnlineSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OnlinePreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregatewhoDunIt {
  count: Int;
}

export interface AggregatewhoDunItPromise
  extends Promise<AggregatewhoDunIt>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatewhoDunItSubscription
  extends Promise<AsyncIterator<AggregatewhoDunIt>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface whoDunItEdge {
  node: whoDunIt;
  cursor: String;
}

export interface whoDunItEdgePromise
  extends Promise<whoDunItEdge>,
    Fragmentable {
  node: <T = whoDunItPromise>() => T;
  cursor: () => Promise<String>;
}

export interface whoDunItEdgeSubscription
  extends Promise<AsyncIterator<whoDunItEdge>>,
    Fragmentable {
  node: <T = whoDunItSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface whoDunItSubscriptionPayload {
  mutation: MutationType;
  node: whoDunIt;
  updatedFields: String[];
  previousValues: whoDunItPreviousValues;
}

export interface whoDunItSubscriptionPayloadPromise
  extends Promise<whoDunItSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = whoDunItPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = whoDunItPreviousValuesPromise>() => T;
}

export interface whoDunItSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<whoDunItSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = whoDunItSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = whoDunItPreviousValuesSubscription>() => T;
}

export interface Email {
  id: ID_Output;
  from: String;
  to: String;
  subject: String;
  body: String;
  status: Status;
  sendError?: String;
  html: Boolean;
}

export interface EmailPromise extends Promise<Email>, Fragmentable {
  id: () => Promise<ID_Output>;
  from: () => Promise<String>;
  to: () => Promise<String>;
  subject: () => Promise<String>;
  body: () => Promise<String>;
  status: () => Promise<Status>;
  sendError: () => Promise<String>;
  html: () => Promise<Boolean>;
}

export interface EmailSubscription
  extends Promise<AsyncIterator<Email>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  from: () => Promise<AsyncIterator<String>>;
  to: () => Promise<AsyncIterator<String>>;
  subject: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Status>>;
  sendError: () => Promise<AsyncIterator<String>>;
  html: () => Promise<AsyncIterator<Boolean>>;
}

export interface EmailNullablePromise
  extends Promise<Email | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  from: () => Promise<String>;
  to: () => Promise<String>;
  subject: () => Promise<String>;
  body: () => Promise<String>;
  status: () => Promise<Status>;
  sendError: () => Promise<String>;
  html: () => Promise<Boolean>;
}

export interface OnlineEdge {
  node: Online;
  cursor: String;
}

export interface OnlineEdgePromise extends Promise<OnlineEdge>, Fragmentable {
  node: <T = OnlinePromise>() => T;
  cursor: () => Promise<String>;
}

export interface OnlineEdgeSubscription
  extends Promise<AsyncIterator<OnlineEdge>>,
    Fragmentable {
  node: <T = OnlineSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EmailSubscriptionPayload {
  mutation: MutationType;
  node: Email;
  updatedFields: String[];
  previousValues: EmailPreviousValues;
}

export interface EmailSubscriptionPayloadPromise
  extends Promise<EmailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmailPreviousValuesPromise>() => T;
}

export interface EmailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmailPreviousValuesSubscription>() => T;
}

export interface EmailEdge {
  node: Email;
  cursor: String;
}

export interface EmailEdgePromise extends Promise<EmailEdge>, Fragmentable {
  node: <T = EmailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EmailEdgeSubscription
  extends Promise<AsyncIterator<EmailEdge>>,
    Fragmentable {
  node: <T = EmailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EmailPreviousValues {
  id: ID_Output;
  from: String;
  to: String;
  subject: String;
  body: String;
  status: Status;
  sendError?: String;
  html: Boolean;
}

export interface EmailPreviousValuesPromise
  extends Promise<EmailPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  from: () => Promise<String>;
  to: () => Promise<String>;
  subject: () => Promise<String>;
  body: () => Promise<String>;
  status: () => Promise<Status>;
  sendError: () => Promise<String>;
  html: () => Promise<Boolean>;
}

export interface EmailPreviousValuesSubscription
  extends Promise<AsyncIterator<EmailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  from: () => Promise<AsyncIterator<String>>;
  to: () => Promise<AsyncIterator<String>>;
  subject: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Status>>;
  sendError: () => Promise<AsyncIterator<String>>;
  html: () => Promise<AsyncIterator<Boolean>>;
}

export interface NotificationEdge {
  node: Notification;
  cursor: String;
}

export interface NotificationEdgePromise
  extends Promise<NotificationEdge>,
    Fragmentable {
  node: <T = NotificationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NotificationEdgeSubscription
  extends Promise<AsyncIterator<NotificationEdge>>,
    Fragmentable {
  node: <T = NotificationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface whoDunItConnection {
  pageInfo: PageInfo;
  edges: whoDunItEdge[];
}

export interface whoDunItConnectionPromise
  extends Promise<whoDunItConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<whoDunItEdge>>() => T;
  aggregate: <T = AggregatewhoDunItPromise>() => T;
}

export interface whoDunItConnectionSubscription
  extends Promise<AsyncIterator<whoDunItConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<whoDunItEdgeSubscription>>>() => T;
  aggregate: <T = AggregatewhoDunItSubscription>() => T;
}

export interface AggregateEmail {
  count: Int;
}

export interface AggregateEmailPromise
  extends Promise<AggregateEmail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmailSubscription
  extends Promise<AsyncIterator<AggregateEmail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NotificationPreviousValues {
  id: ID_Output;
  generatedOn: String;
  modifiedOn?: String;
  gcID: String;
  appID: String;
  actionLink?: String;
  actionLevel: actionLevel;
}

export interface NotificationPreviousValuesPromise
  extends Promise<NotificationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  generatedOn: () => Promise<String>;
  modifiedOn: () => Promise<String>;
  gcID: () => Promise<String>;
  appID: () => Promise<String>;
  actionLink: () => Promise<String>;
  actionLevel: () => Promise<actionLevel>;
}

export interface NotificationPreviousValuesSubscription
  extends Promise<AsyncIterator<NotificationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  generatedOn: () => Promise<AsyncIterator<String>>;
  modifiedOn: () => Promise<AsyncIterator<String>>;
  gcID: () => Promise<AsyncIterator<String>>;
  appID: () => Promise<AsyncIterator<String>>;
  actionLink: () => Promise<AsyncIterator<String>>;
  actionLevel: () => Promise<AsyncIterator<actionLevel>>;
}

export interface NotificationSubscriptionPayload {
  mutation: MutationType;
  node: Notification;
  updatedFields: String[];
  previousValues: NotificationPreviousValues;
}

export interface NotificationSubscriptionPayloadPromise
  extends Promise<NotificationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotificationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotificationPreviousValuesPromise>() => T;
}

export interface NotificationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NotificationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NotificationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotificationPreviousValuesSubscription>() => T;
}

export interface Notification {
  id: ID_Output;
  generatedOn: String;
  modifiedOn?: String;
  gcID: String;
  appID: String;
  actionLink?: String;
  actionLevel: actionLevel;
}

export interface NotificationPromise
  extends Promise<Notification>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  generatedOn: () => Promise<String>;
  modifiedOn: () => Promise<String>;
  gcID: () => Promise<String>;
  appID: () => Promise<String>;
  actionLink: () => Promise<String>;
  actionLevel: () => Promise<actionLevel>;
  email: <T = EmailPromise>() => T;
  online: <T = OnlinePromise>() => T;
  whoDunIt: <T = whoDunItPromise>() => T;
}

export interface NotificationSubscription
  extends Promise<AsyncIterator<Notification>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  generatedOn: () => Promise<AsyncIterator<String>>;
  modifiedOn: () => Promise<AsyncIterator<String>>;
  gcID: () => Promise<AsyncIterator<String>>;
  appID: () => Promise<AsyncIterator<String>>;
  actionLink: () => Promise<AsyncIterator<String>>;
  actionLevel: () => Promise<AsyncIterator<actionLevel>>;
  email: <T = EmailSubscription>() => T;
  online: <T = OnlineSubscription>() => T;
  whoDunIt: <T = whoDunItSubscription>() => T;
}

export interface NotificationNullablePromise
  extends Promise<Notification | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  generatedOn: () => Promise<String>;
  modifiedOn: () => Promise<String>;
  gcID: () => Promise<String>;
  appID: () => Promise<String>;
  actionLink: () => Promise<String>;
  actionLevel: () => Promise<actionLevel>;
  email: <T = EmailPromise>() => T;
  online: <T = OnlinePromise>() => T;
  whoDunIt: <T = whoDunItPromise>() => T;
}

export interface AggregateOnline {
  count: Int;
}

export interface AggregateOnlinePromise
  extends Promise<AggregateOnline>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOnlineSubscription
  extends Promise<AsyncIterator<AggregateOnline>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NotificationConnection {
  pageInfo: PageInfo;
  edges: NotificationEdge[];
}

export interface NotificationConnectionPromise
  extends Promise<NotificationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NotificationEdge>>() => T;
  aggregate: <T = AggregateNotificationPromise>() => T;
}

export interface NotificationConnectionSubscription
  extends Promise<AsyncIterator<NotificationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NotificationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNotificationSubscription>() => T;
}

export interface AggregateNotification {
  count: Int;
}

export interface AggregateNotificationPromise
  extends Promise<AggregateNotification>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNotificationSubscription
  extends Promise<AsyncIterator<AggregateNotification>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OnlineConnection {
  pageInfo: PageInfo;
  edges: OnlineEdge[];
}

export interface OnlineConnectionPromise
  extends Promise<OnlineConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OnlineEdge>>() => T;
  aggregate: <T = AggregateOnlinePromise>() => T;
}

export interface OnlineConnectionSubscription
  extends Promise<AsyncIterator<OnlineConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OnlineEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOnlineSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Status",
    embedded: false
  },
  {
    name: "actionLevel",
    embedded: false
  },
  {
    name: "Notification",
    embedded: false
  },
  {
    name: "whoDunIt",
    embedded: false
  },
  {
    name: "Email",
    embedded: false
  },
  {
    name: "Online",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
